/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type Project = {
  _id: string
  _type: "project"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug?: Slug
  summary?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  image: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: "image"
  }
  technologies: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "skill"
  }>
  githubUrl?: string
  liveUrl?: string
  featured?: boolean
  startDate?: string
}

export type Slug = {
  _type: "slug"
  current: string
  source?: string
}

export type Education = {
  _id: string
  _type: "education"
  _createdAt: string
  _updatedAt: string
  _rev: string
  degree: string
  institution: string
  period: string
  description?: string
  order: number
}

export type Experience = {
  _id: string
  _type: "experience"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  company: string
  period: string
  description: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  order: number
}

export type Skill = {
  _id: string
  _type: "skill"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  featured: boolean
  level?: "Beginner" | "Intermediate" | "Advanced" | "Expert"
  category: "Frontend" | "Backend" | "Tools" | "Design" | "Other"
}

export type PersonalInfo = {
  _id: string
  _type: "personalInfo"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  role: string
  bio: string
  email: string
  phone?: string
  location?: string
  profileImage?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: "image"
  }
  socialLinks?: Array<{
    platform?:
      | "github"
      | "linkedin"
      | "twitter"
      | "instagram"
      | "facebook"
      | "youtube"
      | "other"
    url: string
    _key: string
  }>
}

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Project
  | Slug
  | Education
  | Experience
  | Skill
  | PersonalInfo
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: lib/queries.ts
// Variable: personalInfoQuery
// Query: *[_type == "personalInfo"][0] {    _id,    name,    role,    bio,    email,    phone,    location,    profileImage,    socialLinks[] {      platform,      url    }  }
export type PersonalInfoQueryResult = {
  _id: string
  name: string
  role: string
  bio: string
  email: string
  phone: string | null
  location: string | null
  profileImage: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: "image"
  } | null
  socialLinks: Array<{
    platform:
      | "facebook"
      | "github"
      | "instagram"
      | "linkedin"
      | "other"
      | "twitter"
      | "youtube"
      | null
    url: string
  }> | null
} | null
// Variable: skillsQuery
// Query: *[_type == "skill"] {    _id,    name,    featured,    level,    category  }  | order(category asc, featured desc, name asc)
export type SkillsQueryResult = Array<{
  _id: string
  name: string
  featured: boolean
  level: "Advanced" | "Beginner" | "Expert" | "Intermediate" | null
  category: "Backend" | "Design" | "Frontend" | "Other" | "Tools"
}>
// Variable: experiencesQuery
// Query: *[_type == "experience"] | order(order asc) {    _id,    title,    company,    period,    description,    order  }
export type ExperiencesQueryResult = Array<{
  _id: string
  title: string
  company: string
  period: string
  description: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  order: number
}>
// Variable: educationQuery
// Query: *[_type == "education"] | order(order asc) {    _id,    degree,    institution,    period,    description,    order  }
export type EducationQueryResult = Array<{
  _id: string
  degree: string
  institution: string
  period: string
  description: string | null
  order: number
}>
// Variable: projectsQuery
// Query: *[_type == "project"] | order(order asc) {    _id,    title,    slug,    summary,    description,    image,    technologies[]->{      _id,      name,      category    },    githubUrl,    liveUrl,    featured,    "order": order  }
export type ProjectsQueryResult = Array<{
  _id: string
  title: string
  slug: Slug | null
  summary: string | null
  description: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }> | null
  image: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: "image"
  }
  technologies: Array<{
    _id: string
    name: string
    category: "Backend" | "Design" | "Frontend" | "Other" | "Tools"
  }>
  githubUrl: string | null
  liveUrl: string | null
  featured: boolean | null
  order: null
}>

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "personalInfo"][0] {\n    _id,\n    name,\n    role,\n    bio,\n    email,\n    phone,\n    location,\n    profileImage,\n    socialLinks[] {\n      platform,\n      url\n    }\n  }\n': PersonalInfoQueryResult
    '\n  *[_type == "skill"] {\n    _id,\n    name,\n    featured,\n    level,\n    category\n  }\n  | order(category asc, featured desc, name asc)\n': SkillsQueryResult
    '\n  *[_type == "experience"] | order(order asc) {\n    _id,\n    title,\n    company,\n    period,\n    description,\n    order\n  }\n': ExperiencesQueryResult
    '\n  *[_type == "education"] | order(order asc) {\n    _id,\n    degree,\n    institution,\n    period,\n    description,\n    order\n  }\n': EducationQueryResult
    '\n  *[_type == "project"] | order(order asc) {\n    _id,\n    title,\n    slug,\n    summary,\n    description,\n    image,\n    technologies[]->{\n      _id,\n      name,\n      category\n    },\n    githubUrl,\n    liveUrl,\n    featured,\n    "order": order\n  }\n': ProjectsQueryResult
  }
}
